@using MetricsShared.Common
@using MetricQueryService.Domain.Models
@inject IJSRuntime JS
@inject MetricQueryService.MetricsQueryService _metricQueryService

<div class="row g-2 align-items-center mb-4">
    <div class="col">
        <!-- Page pre-title -->
        <div class="page-pretitle">
            Sky Watch
        </div>
        <h1 class="page-title">
            Dashboard
        </h1>
    </div>
    <!-- Page title actions -->
    @* <div class="col-auto ms-auto d-print-none"> *@
    @*     <div class="btn-list"> *@
    @*         <a href="#" class="btn btn-primary d-none d-sm-inline-block" data-bs-toggle="modal" data-bs-target="#modal-report"> *@
    @*             <!-- Download SVG icon from http://tabler-icons.io/i/plus --> *@
    @*             <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"> *@
    @*                 <path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 5l0 14"/><path d="M5 12l14 0"/> *@
    @*             </svg> *@
    @*             Crear Nueva Alerta *@
    @*         </a> *@
    @*         <a href="#" class="btn btn-primary d-sm-none btn-icon" data-bs-toggle="modal" data-bs-target="#modal-report" aria-label="Create new report"> *@
    @*             <!-- Download SVG icon from http://tabler-icons.io/i/plus --> *@
    @*             <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"> *@
    @*                 <path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 5l0 14"/><path d="M5 12l14 0"/> *@
    @*             </svg> *@
    @*         </a> *@
    @*     </div> *@
    @* </div> *@
</div>
<div class="row g-3 align-items-center">
    <div class="col-auto">
        <span class="status-indicator @style status-indicator-animated">
            <span class="status-indicator-circle"></span>
            <span class="status-indicator-circle"></span>
            <span class="status-indicator-circle"></span>
        </span>
    </div>
    <div class="col">
        <h2 class="page-title">
            @HostName
        </h2>
        <div class="text-muted">
            <ul class="list-inline list-inline-dots mb-0">
                <li class="list-inline-item">
                    <span class="text-green">@IsHostActive</span>
                </li>
                <li class="list-inline-item">@IpAddress</li>
            </ul>
        </div>
    </div>
</div>
<div class="row row-deck row-cards my-4">
    <div class="col-sm-6 col-lg-8">
        <div class="card">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="subheader">Uso de Memoria</div>
                </div>
                <div class="h1 mb-3">@RamUsageValue</div>
                <div class="d-flex mb-2">
                    <div>%</div>
                </div>
                <div class="progress progress-sm">
                    <div class="progress-bar bg-primary" style="width: @RamUsagePercent" role="progressbar" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100" aria-label="75% Complete">
                        <span class="visually-hidden">75% Complete</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-sm-6 col-lg-4">
        <div class="card">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="subheader">Uso de CPU</div>

                </div>
                <div class="h1 mb-3">@CpuUsagePercent</div>
                <div class="d-flex mb-2">
                    <div>%</div>
                </div>
                <div class="progress progress-sm">
                    <div class="progress-bar bg-success" style="width: @CpuUsagePercent" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100" aria-label="75% Complete">
                        <span class="visually-hidden">90% Complete</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row row-cards">
    <div class="col-md-8">
        <div class="card">
            <div class="card-body">
                <h3 class="card-title">Consumo histórico de la memoria RAM</h3>
                @* <div id="chart-uptime"></div> *@
                @* <canvas id="ramUsageChart"></canvas> *@
                <div id="ramUsageChart"></div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h3 class="card-title">Relación de uso de CPU</h3>
                @* <div id="chart-uptime-incidents"></div> *@
                <div id="cpuUsageChart"></div>
            </div>
        </div>
    </div>
</div>

@code {
    private string ErrorMessage;
    private bool HasError = false;
    private string HostName = "";
    private string IpAddress = "";
    private string RamUsageValue = "";
    private string RamUsagePercent = "";
    private string CpuUsagePercent = "";
    private int indexRam = 0;
    private int indexCpu = 0;
    private string style;
    private string IsHostActive;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            while (true)
            {
                await ShowMetrics(MetricType.cpu_usage, "cpuUsageChart");
                await ShowMetrics(MetricType.ram_consumed, "ramUsageChart");
                StateHasChanged();
                await Task.Delay(10000);
            }
        }
        catch (Exception ex)
        {
            HasError = true;
            ErrorMessage = $"Ha ocurrido un error: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task ShowMetrics(MetricType metricType, string componentId)
    {
        var metricName = Enum.GetName(typeof(MetricType), metricType);
        var metricsResult = (await _metricQueryService.GetMetricsAsync(metricType)).TakeLast(10).ToList();

        HostName = metricsResult.Select(x => x.Hostname).FirstOrDefault() ??
                       "Unknown_host";
        
        IpAddress = metricsResult.Select(x => x.IpAddress).FirstOrDefault() ??
                        "Unknown_ip";

        if (HostName is "Unknown_host" || IpAddress is "Unknown_ip")
        {
            style = "status-red";
            IsHostActive = "Inactivo";
        }
        else
        {
            style = "status-green";
            IsHostActive = "Activo";
        }
        
        var labelsArray = metricsResult.Select(x => x.TimesTampString).ToArray();

        var dataArray = metricsResult.Select(x => x.MetricValue = Math.Round(double.Parse(x.MetricValue)).ToString()).ToArray();
        
        switch (metricType)
        {
            case MetricType.cpu_usage:
                CpuUsagePercent = Math.Round(double.Parse(dataArray.LastOrDefault())) + "%";
                break;
                
            case MetricType.ram_consumed:
                var ramValue = double.Parse(dataArray.LastOrDefault());
                RamUsagePercent = Math.Round((ramValue * 100) / 16000) + "%";
                RamUsageValue = ramValue.ToString("N1") + " Mb";
                break;
        }
        await JS.InvokeVoidAsync("showLineGraphic", labelsArray, dataArray, metricName, componentId);
    }

}