@using MetricsShared.Common
@using MetricQueryService.Domain.Models
@inject IJSRuntime JS
@inject MetricQueryService.MetricsQueryService _metricQueryService

@if (HasError)
{
    <p>@ErrorMessage</p>
}
else
{
    <div class="">
        <h4>Uso de CPU (%)</h4>
        <div class="chartLine">
            <canvas id="cpuUsageChart"></canvas>
        </div>
    </div>


    <div class="my-4">
        <h4>Uso de RAM (Mb)</h4>
        <div class="chartLine">
            <canvas id="ramUsageChart"></canvas>
        </div>
    </div>
}

@code {

    private string ErrorMessage;
    private bool HasError = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            StateHasChanged();
            ShowMetrics(MetricType.cpu_usage, "cpuUsageChart");
            ShowMetrics(MetricType.ram_consumed, "ramUsageChart");
        }
        catch (Exception ex)
        {
            HasError = true;
            ErrorMessage = $"Ha ocurrido un error: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task ShowMetrics(MetricType metricType, string componentId)
    {
        var metricName = Enum.GetName(typeof(MetricType), metricType);
        var metricsResult = (await _metricQueryService.GetMetricsAsync(metricType)).ToList();
        
        var labelsArray = metricsResult.Select(x => x.TimesTampString).ToArray();

        var dataArray = metricsResult.Select(x => x.MetricValue).ToArray();
        await JS.InvokeVoidAsync("showLineGraphic", labelsArray, dataArray, metricName, componentId);
    }

}